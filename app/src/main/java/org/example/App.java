/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import lombok.extern.slf4j.Slf4j;
import org.example.exception.ApiException;
import org.example.model.User;
import org.example.model.UserSummary;
import org.example.service.ApiService;
import org.example.service.ApiServiceImpl;
import org.example.service.UserTransformationService;

import java.io.IOException;
import java.util.Collections;
import java.util.List;

/**
 * Main application class that demonstrates fetching data from an API,
 * transforming it, and posting the transformed data.
 */
@Slf4j
public class App {
    private final ApiService apiService;
    private final UserTransformationService transformationService;

    /**
     * Constructor with default services.
     */
    public App() {
        this(new ApiServiceImpl(), new UserTransformationService());
        log.debug("App initialized with default services");
    }

    /**
     * Constructor with custom services for dependency injection.
     *
     * @param apiService the API service to use
     * @param transformationService the transformation service to use
     */
    public App(ApiService apiService, UserTransformationService transformationService) {
        this.apiService = apiService;
        this.transformationService = transformationService;
        log.debug("App initialized with custom services");
    }

    /**
     * Fetches users from the API.
     *
     * @return a list of users
     * @throws IOException if an I/O error occurs
     */
    public List<User> fetchUsers() throws IOException {
        try {
            log.info("Fetching users from API");
            List<User> users = apiService.fetchUsers();
            log.info("Successfully fetched {} users from API", users.size());
            return users;
        } catch (IOException e) {
            log.error("Failed to fetch users from API", e);
            throw e;
        } catch (Exception e) {
            log.error("Unexpected error when fetching users from API", e);
            throw new ApiException("Failed to fetch users", 500, "/users", e);
        }
    }

    /**
     * Transforms users into user summaries.
     *
     * @param users the users to transform
     * @return a list of user summaries
     */
    public List<UserSummary> transformUsers(List<User> users) {
        if (users == null) {
            log.warn("Attempted to transform null user list, returning empty list");
            return Collections.emptyList();
        }
        
        log.info("Transforming {} users into summaries", users.size());
        List<UserSummary> summaries = transformationService.transformUsers(users);
        log.info("Successfully transformed {} users into summaries", summaries.size());
        return summaries;
    }

    /**
     * Filters users by email domain and transforms them into user summaries.
     *
     * @param users the users to filter and transform
     * @param domain the email domain to filter by
     * @return a list of filtered and transformed user summaries
     */
    public List<UserSummary> filterByEmailDomainAndTransform(List<User> users, String domain) {
        if (users == null) {
            log.warn("Attempted to filter null user list, returning empty list");
            return Collections.emptyList();
        }
        
        if (domain == null || domain.isEmpty()) {
            log.warn("Attempted to filter by null or empty domain, returning all users");
            return transformUsers(users);
        }
        
        log.info("Filtering {} users by email domain: {}", users.size(), domain);
        List<UserSummary> summaries = transformationService.filterByEmailDomainAndTransform(users, domain);
        log.info("Successfully filtered and transformed {} users with email domain: {}", 
                summaries.size(), domain);
        return summaries;
    }

    /**
     * Posts a user summary to the API.
     *
     * @param userSummary the user summary to post
     * @return true if the post was successful, false otherwise
     * @throws IOException if an I/O error occurs
     */
    public boolean postUserSummary(UserSummary userSummary) throws IOException {
        if (userSummary == null) {
            log.warn("Attempted to post null user summary, returning false");
            return false;
        }
        
        try {
            log.info("Posting user summary for user: {}", userSummary.getFullName());
            boolean success = apiService.postUserSummary(userSummary);
            log.info("Successfully posted user summary for user: {}, result: {}", 
                    userSummary.getFullName(), success);
            return success;
        } catch (IOException e) {
            log.error("Failed to post user summary for user: {}", userSummary.getFullName(), e);
            throw e;
        } catch (Exception e) {
            log.error("Unexpected error when posting user summary for user: {}", 
                    userSummary.getFullName(), e);
            throw new ApiException("Failed to post user summary", 500, "/posts", e);
        }
    }

    /**
     * Demonstrates the complete workflow: fetch, transform, and post.
     *
     * @param args command line arguments
     */
    public static void main(String[] args) {
        log.info("Starting application");
        App app = new App();
        
        try {
            // Fetch users from API
            List<User> users = app.fetchUsers();
            log.info("Fetched {} users from API", users.size());
            
            // Filter users by email domain and transform
            String emailDomain = "example.com";
            List<UserSummary> filteredSummaries = app.filterByEmailDomainAndTransform(users, emailDomain);
            log.info("Filtered and transformed {} users with email domain: {}", 
                    filteredSummaries.size(), emailDomain);
            
            if (filteredSummaries.isEmpty()) {
                log.warn("No users found with email domain: {}, trying with city filter", emailDomain);
                // Try filtering by city instead
                String city = "Gwenborough";
                filteredSummaries = app.transformationService.filterByCityAndTransform(users, city);
                log.info("Filtered and transformed {} users from city: {}", 
                        filteredSummaries.size(), city);
            }
            
            // Post each user summary
            int successCount = 0;
            for (UserSummary summary : filteredSummaries) {
                try {
                    boolean success = app.postUserSummary(summary);
                    if (success) {
                        successCount++;
                    }
                    log.info("Posted user summary for {} ({}): {}", 
                            summary.getFullName(), summary.getUserId(), 
                            (success ? "SUCCESS" : "FAILED"));
                } catch (Exception e) {
                    log.error("Error posting user summary for {}: {}", 
                            summary.getFullName(), e.getMessage());
                }
            }
            
            log.info("Successfully posted {}/{} user summaries", 
                    successCount, filteredSummaries.size());
            log.info("Application completed successfully");
            
        } catch (IOException e) {
            log.error("Error during API operations: {}", e.getMessage(), e);
            System.err.println("Error during API operations: " + e.getMessage());
        } catch (Exception e) {
            log.error("Unexpected error: {}", e.getMessage(), e);
            System.err.println("Unexpected error: " + e.getMessage());
        }
    }
}
